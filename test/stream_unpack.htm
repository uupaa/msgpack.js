<!DOCTYPE html><html lang="ja">
<head>
<meta charset="UTF-8" />
<title>msgpack stream unpack test</title>
<style>
.uutest ol { background-color:dodgerblue;color:white }
.uutest li { padding:5px;border:1px solid #ccc }
.uutest .li0 { background-color:red   }
.uutest .li1 { background-color:green }
.uutest .li2 { background-color:red   }
.uutest .li3 { background-color:#0a0  }
.uutestinfo { position:fixed;top:10px;right:10px;font-size:xx-large }
.uutestinfo a { border: 3px outset gray;padding:3px;background-color:red;color:white }
.uutestinfo .score { color:black;text-shadow:gray 1px 1px 1px }
.uutestinfo .ngzone {}
</style>
<script src="../msgpack.js" type="text/javascript"></script>
<script src="10000.js"></script>
<script src="uupaa.js"></script>
<script type="text/javascript">
function equals(a1, a2) {
    //http://stackoverflow.com/questions/3115982/how-to-check-javascript-array-equals
    return JSON.stringify(a1) == JSON.stringify(a2);
}
/*
(function sandbox() {
    var data = {'abc' : [123]};
    var b = msgpack.pack(data);
    var u = msgpack.stream_unpacker();
    var r = u.unpack(b);
    if (!equals(r, data)) {
        alert("it should be " + JSON.stringify(data) + ":" + JSON.stringify(r));
    }
})(); */
var solid100 = {
    "0": null,
    "1": {
        "1": {
            "1": -1
        }
    }, "2": "2\u0002\u0002\u0002\u0002",
    "3": 0.024300000221130002,
    "4": [null, {
        "4": true
    }, [
        [null, false, {
            "4": false
        }], {
            "4": "4\u0004\u0004\u0004\u0004"
        }, {
            "4": {
                "4": {
                    "4": -0.032400000294840005
                }
            }
        }]],
    "5": null,
    "6": true,
    "7": [{
        "7": null
    }, {
        "7": true
    }, false],
    "8": 8,
    "9": [0.07290000066339, 9, true],
    "10": 10,
    "11": {
        "11": -11
    }, "12": ["c\f\f\f\f", 12, false],
    "13": 13,
    "14": [true, -14, null],
    "15": 15,
    "16": null,
    "17": "11\u0011\u0011\u0011\u0011",
    "18": false,
    "19": [false, {
        "19": null
    }, "13\u0013\u0013\u0013\u0013"],
    "20": [-20, true, true],
    "21": null,
    "22": false,
    "23": -0.18630000169533,
    "24": false,
    "25": ["19\u0019\u0019\u0019\u0019", {
        "25": [false, 0.20250000184275002, 25]
    }, [
        [false, false, false], null, {
            "25": true
        }]],
    "26": null,
    "27": 0.21870000199017,
    "28": {
        "28": -0.22680000206388
    }, "29": {
        "29": null
    }, "30": 0.24300000221130002,
    "31": 0.25110000228501,
    "32": null,
    "33": 0.26730000243243,
    "34": false,
    "35": -0.28350000257985003,
    "36": {
        "36": "24$$$$"
    }, "37": false,
    "38": {
        "38": 0.30780000280098
    }, "39": null,
    "40": [null, false, "28(((("],
    "41": {
        "41": 0.33210000302211
    }, "42": true,
    "43": null,
    "44": {
        "44": {
            "44": 44
        }
    }, "45": true,
    "46": null,
    "47": {
        "47": true
    }, "48": -0.38880000353808003,
    "49": {
        "49": {
            "49": [false, 0.39690000361179, ["311111", true, 0.39690000361179]]
        }
    }, "50": [-50, [true, true, 50], false],
    "51": 0.41310000375921,
    "52": null,
    "53": null,
    "54": {
        "54": -54
    }, "55": true,
    "56": -56,
    "57": null,
    "58": {
        "58": null
    }, "59": "3b;;;;",
    "60": "3c<<<<",
    "61": 0.49410000449631003,
    "62": {
        "62": {
            "62": [null, 62, null]
        }
    }, "63": false,
    "64": false,
    "65": [65, null, [65, -0.52650000479115, 65]],
    "66": 66,
    "67": -67,
    "68": {
        "68": -68
    }, "69": 69,
    "70": null,
    "71": false,
    "72": -0.58320000530712,
    "73": 0.59130000538083,
    "74": {
        "74": true
    }, "75": {
        "75": {
            "75": false
        }
    }, "76": 0.61560000560196,
    "77": 0.6237000056756701,
    "78": null,
    "79": 79,
    "80": "50PPPP",
    "81": {
        "81": {
            "81": 0.6561000059705101
        }
    }, "82": -82,
    "83": [true, ["53SSSS", {
        "83": {
            "83": {
                "83": [{
                    "83": 83
                }, 83, {
                    "83": -83
                }]
            }
        }
    }, -0.6723000061179301], 83],
    "84": {
        "84": "54TTTT"
    }, "85": true,
    "86": -86,
    "87": null,
    "88": {
        "88": 0.71280000648648
    }, "89": 89,
    "90": {
        "90": false
    }, "91": true,
    "92": -92,
    "93": 93,
    "94": -0.7614000069287401,
    "95": {
        "95": 0.76950000700245
    }, "96": null,
    "97": [
        ["61aaaa", {
            "97": null
        }, -0.7857000071498701], {
            "97": [0.7857000071498701, 0.7857000071498701, [0.7857000071498701, -0.7857000071498701, "61aaaa"]]
        }, {
            "97": 97
        }],
    "98": {
        "98": true
    }, "99": null, 
};
function test_stream_unpack() {
    var b1 = msgpack.pack([0,1,2]);
    var b2 = msgpack.pack([3,4,5,6,7,8,9]);
    var u = msgpack.stream_unpacker();
    var buf = new Uint8Array(b1.length + b2.length);
    buf.set(b1);
    buf.set(b2, b1.length);
    console.log("buflen:" + buf.length + "|" + JSON.stringify(buf));
    var p1 = u.unpack(buf.subarray(0, buf.length / 2));
    if (equals(p1, [0,1,2])) { 
    }
    else { 
       console.log("unpack fails:" + JSON.stringify(p1) + " is not same as " + JSON.stringify([0,1,2])); 
       return false;
    }
    var p2 = u.unpack(null);
    if (p2 === undefined) {
    }
    else {
       console.log("unpack fails:" + JSON.stringify(p2) + " should be same as null"); 
       return false;
    }
    var p3 = u.unpack(buf.subarray(buf.length / 2));
    if (equals(p3, [3,4,5,6,7,8,9])) { 
    }
    else { 
       console.log("unpack fails:" + JSON.stringify(p3) + " is not same as " + JSON.stringify([3,4,5,6,7,8,9]));
       return false; 
    }
    return true;
}
//stream unpack packed-one big hash 
function test_long_chunked_data(name, data) {
    var b = msgpack.pack(data);
    var chunk = 64; //devide b as 64byte chunk
    var n_chunk = Math.ceil(b.length / chunk);
    var buf = new Uint8Array(b);
    var u = msgpack.stream_unpacker();
    //console.log(JSON.stringify("whole buffer:" + JSON.stringify(buf)));
    for (i = 0; i < n_chunk; i++) {
        var begin = i * chunk, end = (i + 1) * chunk;
        if (end >= buf.length) { 
            end = buf.length; 
        }
        var r = u.unpack(buf.subarray(begin, end));
        if (end == buf.length) {
            console.log("stream finished: size=" + buf.length);
            if (!equals(r, data)) {
                console.log(name + ":invalid result: r=" + JSON.stringify(r).substr(0,100) + "(*snip*), original=" + JSON.stringify(data).substr(0,100) + "(*snip*)");
                return false;
            }
        }
        else if (r !== undefined) {
            console.log(name + ":unpack should on going but r is not null:" + JSON.stringify(r));
            return false;
        }
    }
    console.log(name + ": stream unpack OK!");
    return true;
}
//stream unpack batched msgpack records
function test_batched_chunk_data(name, data) {
    var buf = new Uint8Array(256 * 1024), blen = 0;   //256k
    for (k in data) {
        var b = msgpack.pack(data[k]);
        buf.set(b, blen);
        blen += b.length;
    }
    var buf = buf.subarray(0, blen);
    var n_elem = Object.keys(data).length, parsed = [];
    var chunk = 64; //devide b as 64byte chunk
    var n_chunk = Math.ceil(buf.length / chunk);
    var u = msgpack.stream_unpacker();
    //console.log(JSON.stringify("whole buffer:" + JSON.stringify(buf)));
    for (i = 0; i < n_chunk; i++) {
        var begin = i * chunk, end = (i + 1) * chunk;
        if (end >= buf.length) { 
            end = buf.length; 
        }
        var r = u.unpack(buf.subarray(begin, end));
        while (r !== undefined) {
            parsed.push(r);
            r = u.unpack(null);
        }
        if (end == buf.length) {
            console.log("stream finished: size=" + buf.length);
            if (n_elem != parsed.length) {
                console.log("parsed result incorrect(num) expect:" + n_elem + "/actually:" + parsed.length);
                return false;
            }
            for (var j = 0; j < parsed.length; j++) {
                if (!equals(data[String(j)], parsed[j])) {
                    console.log(String(j) + ":parsed result incorrect");
                    console.log("src:" + JSON.stringify(data[String(j)]));
                    console.log("result:" + JSON.stringify(parsed[j]));
                    return false;
                }
            }
        }
    }
    console.log(name + ": batched stream unpack OK!");
    return true;
}

uu.test = function(hash) {
    var r, i;

    for (i in hash) {
        v = hash[i];
        if (v === "") { // caption
            uu.ok(i);
        } else {
            r = v();
            uu.ok(i, r[0], r[1], r[2], r[3]);
        }
    }
    uu.ok();
};
uu.ready(function(uu) {
    uu.test({
            'simple stream unpack': function() {
                var rv = test_stream_unpack();
                return [rv, "is", true, null];
            },
            'big hash unpack (solid100)': function() {
                var rv = test_long_chunked_data('solid100', solid100);
                return [rv, "is", true, null];
            },
            'big hash unpack (solid10000)': function() {
                var rv = test_long_chunked_data('solid10000', solid10000);
                return [rv, "is", true, null];
            },
            'batched record unpack (solid100)': function() {
                var rv = test_batched_chunk_data('solid100', solid100);
                return [rv, "is", true, null];
            },
            'batched record unpack (solid10000)': function() {
                var rv = test_batched_chunk_data('solid10000', solid10000);
                return [rv, "is", true, null];
            },
    });
});
</script>
</head><body></body></html>
